{
  "name": "redux-devtools",
  "version": "3.0.2",
  "description": "Redux DevTools with hot reloading and time travel",
  "main": "lib/index.js",
  "scripts": {
    "clean": "rimraf lib",
    "build": "babel src --out-dir lib",
    "lint": "eslint src test examples",
    "test": "NODE_ENV=test mocha --compilers js:babel-core/register --recursive",
    "test:watch": "NODE_ENV=test mocha --compilers js:babel-core/register --recursive --watch",
    "test:cov": "babel-node ./node_modules/.bin/isparta cover ./node_modules/.bin/_mocha -- --recursive",
    "prepublish": "npm run lint && npm run test && npm run clean && npm run build"
  },
  "files": [
    "lib",
    "src"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/gaearon/redux-devtools.git"
  },
  "keywords": [
    "redux",
    "devtools",
    "flux",
    "hot reloading",
    "time travel",
    "live edit"
  ],
  "author": {
    "name": "Dan Abramov",
    "email": "dan.abramov@me.com",
    "url": "http://github.com/gaearon"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/gaearon/redux-devtools/issues"
  },
  "homepage": "https://github.com/gaearon/redux-devtools",
  "devDependencies": {
    "babel-cli": "^6.3.17",
    "babel-core": "^6.3.17",
    "babel-eslint": "^4.1.6",
    "babel-loader": "^6.2.0",
    "babel-preset-es2015-loose": "^6.1.3",
    "babel-preset-react": "6.3.13",
    "babel-preset-stage-0": "^6.3.13",
    "eslint": "^0.23",
    "eslint-config-airbnb": "0.0.6",
    "eslint-plugin-react": "^2.3.0",
    "expect": "^1.6.0",
    "isparta": "^3.0.3",
    "jsdom": "^6.5.1",
    "mocha": "^2.2.5",
    "mocha-jsdom": "^1.0.0",
    "react": "^0.14.0",
    "react-addons-test-utils": "^0.14.0",
    "react-dom": "^0.14.0",
    "rimraf": "^2.3.4",
    "webpack": "^1.11.0"
  },
  "peerDependencies": {
    "redux": "^3.0.0",
    "react": "^0.14.0"
  },
  "dependencies": {
    "lodash": "^3.10.1",
    "react-redux": "^4.0.0",
    "redux": "^3.0.0"
  },
  "readme": "Redux DevTools\n=========================\n\nA live-editing time travel environment for [Redux](https://github.com/rackt/redux).  \n**[See Dan's React Europe talk demoing it!](http://youtube.com/watch?v=xsSnOQynTHs)**\n\n[![build status](https://img.shields.io/travis/gaearon/redux-devtools/master.svg?style=flat-square)](https://travis-ci.org/gaearon/redux-devtools)\n[![npm version](https://img.shields.io/npm/v/redux-devtools.svg?style=flat-square)](https://www.npmjs.com/package/redux-devtools)\n[![npm downloads](https://img.shields.io/npm/dm/redux-devtools.svg?style=flat-square)](https://www.npmjs.com/package/redux-devtools)\n[![redux channel on discord](https://img.shields.io/badge/discord-redux@reactiflux-738bd7.svg?style=flat-square)](https://discord.gg/0ZcbPKXt5bWb10Ma)\n\n![](http://i.imgur.com/J4GeW0M.gif)\n\n### Features\n\n* Lets you inspect every state and action payload\n* Lets you go back in time by “cancelling” actions\n* If you change the reducer code, each “staged” action will be re-evaluated\n* If the reducers throw, you will see during which action this happened, and what the error was\n* With `persistState()` store enhancer, you can persist debug sessions across page reloads\n\n### Overview\n\nRedux DevTools is a development time package that provides power-ups for your Redux development workflow. Be careful to strip its code in production! To use Redux DevTools, you need to choose a “monitor”—a React component that will serve as a UI for the DevTools. Different tasks and workflows require different UIs, so Redux DevTools is built to be flexible in this regard. We recommend using [`LogMonitor`](https://github.com/gaearon/redux-devtools-log-monitor) for inspecting the state and time travel, and wrap it in a [`DockMonitor`](https://github.com/gaearon/redux-devtools-dock-monitor) to quickly move it across the screen. That said, when you’re comfortable rolling up your own setup, feel free to do this, and share it with us.\n\n### Installation\n\n```\nnpm install --save-dev redux-devtools\n```\n\nYou’ll also likely want to install some monitors:\n\n```\nnpm install --save-dev redux-devtools-log-monitor\nnpm install --save-dev redux-devtools-dock-monitor\n```\n\n### Usage\n\n#### Create a `DevTools` Component\n\nSomewhere in your project, create a `DevTools` component by passing a `monitor` element to `createDevTools`. In the following example our `monitor` consists of [`LogMonitor`](https://github.com/gaearon/redux-devtools-log-monitor) docked within [`DockMonitor`](https://github.com/gaearon/redux-devtools-dock-monitor):\n\n##### `containers/DevTools.js`\n\n```js\nimport React from 'react';\n\n// Exported from redux-devtools\nimport { createDevTools } from 'redux-devtools';\n\n// Monitors are separate packages, and you can make a custom one\nimport LogMonitor from 'redux-devtools-log-monitor';\nimport DockMonitor from 'redux-devtools-dock-monitor';\n\n// createDevTools takes a monitor and produces a DevTools component\nconst DevTools = createDevTools(\n  // Monitors are individually adjustable with props.\n  // Consult their repositories to learn about those props.\n  // Here, we put LogMonitor inside a DockMonitor.\n  <DockMonitor toggleVisibilityKey='ctrl-h'\n               changePositionKey='ctrl-q'>\n    <LogMonitor theme='tomorrow' />\n  </DockMonitor>\n);\n\nexport default DevTools;\n```\n\nNote that you can use `LogMonitor` directly without wrapping it in `DockMonitor` if you’d like to display the DevTools UI somewhere right inside your application:\n\n```js\n// If you'd rather not use docking UI, use <LogMonitor> directly\nconst DevTools = createDevTools(\n  <LogMonitor theme='solarized' />\n);\n```\n\n#### Use `DevTools.instrument()` Store Enhancer\n\nThe `DevTools` component you created with `createDevTools()` has a special static method called `instrument()`. It returns a [store enhancer](http://rackt.github.io/redux/docs/Glossary.html#store-enhancer) that you need to use in development.\n\nA store enhancer is a function that enhances the behavior of `createStore()`. You can pass store enhancer as the last optional argument to `createStore()`. You probably already used another store enhancer—[`applyMiddleware()`](http://redux.js.org/docs/api/applyMiddleware.html). Unlike `applyMiddleware()`, you will need to be careful to only use `DevTools.instrument()` in development environment, and never in production.\n\nThe easiest way to apply several store enhancers in a row is to use the [`compose()`](http://redux.js.org/docs/api/compose.html) utility function that ships with Redux. It is the same `compose()` that you can find in Underscore and Lodash. In our case, we would use it to compose several store enhancers into one: `compose(applyMiddleware(m1, m2, m3), DevTools.instrument())`.\n\nIt’s important that you should add `DevTools.instrument()` *after* `applyMiddleware` in your `compose()` function arguments. This is because `applyMiddleware` is potentially asynchronous, but `DevTools.instrument()` expects all actions to be plain objects rather than actions interpreted by asynchronous middleware such as [redux-promise](https://github.com/acdlite/redux-promise) or [redux-thunk](https://github.com/gaearon/redux-thunk). So make sure `applyMiddleware()` goes first in the `compose()` call, and `DevTools.instrument()` goes after it.\n\n##### `store/configureStore.js`\n\n```js\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport rootReducer from '../reducers';\nimport DevTools from '../containers/DevTools';\n\nconst enhancer = compose(\n  // Middleware you want to use in development:\n  applyMiddleware(d1, d2, d3),\n  // Required! Enable Redux DevTools with the monitors you chose\n  DevTools.instrument()\n);\n\nexport default function configureStore(initialState) {\n  // Note: only Redux >= 3.1.0 supports passing enhancer as third argument.\n  // See https://github.com/rackt/redux/releases/tag/v3.1.0\n  const store = createStore(rootReducer, initialState, enhancer);\n\n  // Hot reload reducers (requires Webpack or Browserify HMR to be enabled)\n  if (module.hot) {\n    module.hot.accept('../reducers', () =>\n      store.replaceReducer(require('../reducers')/*.default if you use Babel 6+ */)\n    );\n  }\n\n  return store;\n}\n```\n\nIf you’d like, you may add another store enhancer called `persistState()`. It ships with this package, and it lets you serialize whole sessions (including all dispatched actions and the state of the monitors) by a URL key. So if you visit `http://localhost:3000/?debug_session=reproducing_weird_bug`, do something in the app, then open `http://localhost:3000/?debug_session=some_other_feature`, and then go back to `http://localhost:3000/?debug_session=reproducing_weird_bug`, the state will be restored. The implementation of `persistState()` is fairly naïve but you can take it as an inspiration and build a proper UI for it if you feel like it!\n\n```js\n// ...\nimport { persistState } from 'redux-devtools';\n\nconst enhancer = compose(\n  // Middleware you want to use in development:\n  applyMiddleware(d1, d2, d3),\n  // Required! Enable Redux DevTools with the monitors you chose\n  DevTools.instrument(),\n  // Optional. Lets you write ?debug_session=<key> in address bar to persist debug sessions\n  persistState(getDebugSessionKey())\n);\n\nfunction getDebugSessionKey() {\n  // You can write custom logic here!\n  // By default we try to read the key from ?debug_session=<key> in the address bar\n  const matches = window.location.href.match(/[?&]debug_session=([^&]+)\\b/);\n  return (matches && matches.length > 0)? matches[1] : null;\n}\n\nexport default function configureStore(initialState) {\n  // ...\n}\n```\n\n#### Exclude DevTools from Production Builds\n\nFinally, to make sure we’re not pulling any DevTools-related code in the production builds, we will envify our code. You can use [`DefinePlugin`](https://github.com/webpack/docs/wiki/list-of-plugins#defineplugin) with Webpack, or [`envify`](https://github.com/zertosh/loose-envify) for Browserify.\n\nThe trick is to replace all occurrences of a constant like `process.env.NODE_ENV` into a string depending on the environment, and import and render `redux-devtools` only when `process.env.NODE_ENV` is not `'production'`. Then, if you have an Uglify step before production, Uglify will eliminate dead `if (false)` branches with `redux-devtools` imports.\n\nWith Webpack, you'll need two config files, one for development and one for production. Here's a snippet from an example production config:\n\n##### `webpack.config.prod.js`\n\n```js\n// ...\nplugins: [\n  new webpack.DefinePlugin({\n    'process.env.NODE_ENV': JSON.stringify('production')\n  })\n],\n// ...\n```\n\nIf you are using ES6 modules with Webpack 1.x and Babel, you might try putting your `import` statement inside an `if (process.env.NODE_ENV !== 'production)` to exclude the DevTools package from your production bundle. However this ES6 specification forbids it, so this won’t compile. Instead, you can use a conditional CommonJS `require`. Babel will let it compile, and Uglify will eliminate the dead branches before Webpack creates a bundle. This is why we recommend creating a `configureStore.js` file that either directs you to `configureStore.dev.js` or `configureStore.prod.js` depending on the configuration. While it is a little bit more maintenance, the upside is that you can be sure you won’t pull any development dependencies into the production builds, and that you can easily enable different middleware (e.g. crash reporting, logging) in the production environment.\n\n##### `store/configureStore.js`\n\n```js\n// Use DefinePlugin (Webpack) or loose-envify (Browserify)\n// together with Uglify to strip the dev branch in prod build.\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./configureStore.prod');\n} else {\n  module.exports = require('./configureStore.dev');\n}\n```\n\n##### `store/configureStore.prod.js`\n\n```js\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport rootReducer from '../reducers';\n\n// Middleware you want to use in production:\nconst enhancer = applyMiddleware(p1, p2, p3);\n\nexport default function configureStore(initialState) {\n  // Note: only Redux >= 3.1.0 supports passing enhancer as third argument.\n  // See https://github.com/rackt/redux/releases/tag/v3.1.0\n  return createStore(rootReducer, initialState, enhancer);\n};\n```\n\n##### `store/configureStore.dev.js`\n\n```js\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { persistState } from 'redux-devtools';\nimport rootReducer from '../reducers';\nimport DevTools from '../containers/DevTools';\n\nconst enhancer = compose(\n  // Middleware you want to use in development:\n  applyMiddleware(d1, d2, d3),\n  // Required! Enable Redux DevTools with the monitors you chose\n  DevTools.instrument(),\n  // Optional. Lets you write ?debug_session=<key> in address bar to persist debug sessions\n  persistState(getDebugSessionKey())\n);\n\nfunction getDebugSessionKey() {\n  // You can write custom logic here!\n  // By default we try to read the key from ?debug_session=<key> in the address bar\n  const matches = window.location.href.match(/[?&]debug_session=([^&]+)\\b/);\n  return (matches && matches.length > 0)? matches[1] : null;\n}\n\nexport default function configureStore(initialState) {\n  // Note: only Redux >= 3.1.0 supports passing enhancer as third argument.\n  // See https://github.com/rackt/redux/releases/tag/v3.1.0\n  const store = createStore(rootReducer, initialState, enhancer);\n\n  // Hot reload reducers (requires Webpack or Browserify HMR to be enabled)\n  if (module.hot) {\n    module.hot.accept('../reducers', () =>\n      store.replaceReducer(require('../reducers')/*.default if you use Babel 6+ */)\n    );\n  }\n\n  return store;\n}\n```\n\n#### Render `<DevTools>` in Your App...\n\nFinally, include the `DevTools` component in your page.  \nA naïve way to do this would be to render it right in your `index.js`:\n\n##### `index.js`\n\n```js\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport configureStore from './store/configureStore';\nimport TodoApp from './containers/TodoApp';\n\n// Don't do this! You’re bringing DevTools into the production bundle.\nimport DevTools from './containers/DevTools';\n\nconst store = configureStore();\n\nrender(\n  <Provider store={store}>\n    <div>\n      <TodoApp />\n      <DevTools />\n    </div>\n  </Provider>\n  document.getElementById('app')\n);\n```\n\nWe recommend a different approach. Create a `Root.js` component that renders the root of your application (usually some component surrounded by a `<Provider>`). Then use the same trick with conditional `require` statements to have two versions of it, one for development, and one for production:\n\n##### `containers/Root.js`\n\n```js\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./Root.prod');\n} else {\n  module.exports = require('./Root.dev');\n}\n```\n\n##### `containers/Root.dev.js`\n\n```js\nimport React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport TodoApp from './TodoApp';\nimport DevTools from './DevTools';\n\nexport default class Root extends Component {\n  render() {\n    const { store } = this.props;\n    return (\n      <Provider store={store}>\n        <div>\n          <TodoApp />\n          <DevTools />\n        </div>\n      </Provider>\n    );\n  }\n}\n```\n\n##### `containers/Root.prod.js`\n\n```js\nimport React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport TodoApp from './TodoApp';\n\nexport default class Root extends Component {\n  render() {\n    const { store } = this.props;\n    return (\n      <Provider store={store}>\n        <TodoApp />\n      </Provider>\n    );\n  }\n}\n```\n\n#### ...Or Open Them in a New Window\n\nWhen you use [`DockMonitor`](https://github.com/gaearon/redux-devtools-dock-monitor), you usually want to render `<DevTools>` at the root of your app. It will appear in a docked container above it. However, you can also render it anywhere else in your React component tree. To do this, you can remove `DockMonitor` and instead render `<DevTools>` inside some component of your app. Don’t forget to create two versions of this component to exclude `DevTools` in production!\n\nHowever you don’t even have to render `<DevTools>` in the same window. For example, you may prefer to display it in a popup. In this case, you can remove `DockMonitor` from `DevTools.js` and just use the `LogMonitor`, and have some code like this:\n\n##### `index.js`\n\n```js\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport { render } from 'react-dom';\nimport configureStore from './store/configureStore';\nimport App from './containers/App';\n\nconst store = configureStore();\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nif (process.env.NODE_ENV !== 'production') {\n  const showDevTools = require('./showDevTools');\n  showDevTools(store);\n}\n```\n\n##### `showDevTools.js`\n\n```js\nimport React from 'react';\nimport { render } from 'react-dom';\nimport DevTools from './containers/DevTools';\n\nexport default function showDevTools(store) {\n  const popup = window.open(null, 'Redux DevTools', 'menubar=no,location=no,resizable=yes,scrollbars=no,status=no');\n  // Reload in case it already exists\n  popup.location.reload();\n\n  setTimeout(() => {\n    popup.document.write('<div id=\"react-devtools-root\"></div>');\n    render(\n      <DevTools store={store} />,\n      popup.document.getElementById('react-devtools-root')\n    );\n  }, 10);\n}\n```\n\nPersonal preferences vary, and whether to put the DevTools in a separate window, in a dock, or right inside you app’s user interface, is up to you. Make sure to check the documentation for the monitors you use and learn about the different props they support for customizing the appearance and the behavior.\n\nNote that there are no useful props you can pass to the `DevTools` component other than the `store`. The `store` prop is needed if you don’t wrap `<DevTools>` in a `<Provider>`—just like with any connected component. To adjust the monitors, you need to pass props to them inside `DevTools.js` itself inside the `createDevTools()` call when they are used.\n\n### Gotchas\n\n* **Your reducers have to be pure and free of side effects to work correctly with DevTools.** For example, even generating a random ID in reducer makes it impure and non-deterministic. Instead, do this in action creators.\n\n* **Make sure to only apply `DevTools.instrument()` and render `<DevTools>` in development!** In production, this will be terribly slow because actions just accumulate forever. As described above, you need to use conditional `require`s and use `DefinePlugin` (Webpack) or `loose-envify` (Browserify) together with Uglify to remove the dead code. Here is [an example](https://github.com/erikras/react-redux-universal-hot-example/) that adds Redux DevTools handling the production case correctly.\n\n* **It is important that `DevTools.instrument()` store enhancer should be added to your middleware stack *after* `applyMiddleware` in the `compose`d functions, as `applyMiddleware` is potentially asynchronous.** Otherwise, DevTools won’t see the raw actions emitted by asynchronous middleware such as [redux-promise](https://github.com/acdlite/redux-promise) or [redux-thunk](https://github.com/gaearon/redux-thunk).\n\n### Running Examples\n\nClone the project:\n\n```\ngit clone https://github.com/gaearon/redux-devtools.git\ncd redux-devtools\n```\n\nRun `npm install` in the root folder:\n\n```\nnpm install\n```\n\nNow you can open an example folder and run `npm install` there:\n\n```\ncd examples/counter # or examples/todomvc\nnpm install\n```\n\nFinally, run the development server and open the page:\n\n```\nnpm start\nopen http://localhost:3000\n```\n\nTry clicking on actions in the log, or changing some code inside the reducers. You should see the action log re-evaluate the state on every code change.\n\nAlso try opening `http://localhost:3000/?debug_session=123`, click around, and then refresh. You should see that all actions have been restored from the local storage.\n\n### Custom Monitors\n\n**DevTools accepts monitor components so you can build a completely custom UI.** [`LogMonitor`](https://github.com/gaearon/redux-devtools-log-monitor) and [`DockMonitor`](https://github.com/gaearon/redux-devtools-dock-monitor) are just examples of what is possible.\n\n**[I challenge you to build a custom monitor for Redux DevTools!](https://github.com/gaearon/redux-devtools/issues/3)**\n\nSome crazy ideas for custom monitors:\n\n* A slider that lets you jump between computed states just by dragging it\n* An in-app layer that shows the last N states right in the app (e.g. for animation)\n* A time machine like interface where the last N states of your app reside on different Z layers\n* Feel free to come up with and implement your own! Check [`LogMonitor`](https://github.com/gaearon/redux-devtools-log-monitor) `propTypes` to see what you can do.\n\nIn fact some of these are implemented already:\n\n#### [redux-slider-monitor](https://github.com/calesce/redux-slider-monitor)\n\n![](https://camo.githubusercontent.com/d61984306d27d5e0739efc2d57c56ba7aed7996c/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f662e636c2e6c792f6974656d732f3269314c3147316e3161316833793161324f31772f53637265656e2532305265636f7264696e67253230323031352d30382d3034253230617425323030372e3435253230504d2e676966)\n\n#### [redux-devtools-filterable-log-monitor](https://github.com/bvaughn/redux-devtools-filterable-log-monitor/)\n\n![reduxfilterablelogmonitor](https://cloud.githubusercontent.com/assets/29597/12061839/96898fe2-af5e-11e5-8e6a-636379a81c10.gif)\n\n#### Keep them coming!\n\nCreate a PR to add your custom monitor.\n\n### License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "redux-devtools@3.0.2",
  "dist": {
    "shasum": "c8e9121a117e21defe954ae403cac5fb932ef1d2"
  },
  "_from": "redux-devtools@",
  "_resolved": "https://registry.npmjs.org/redux-devtools/-/redux-devtools-3.0.2.tgz"
}
